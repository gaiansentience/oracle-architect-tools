create or replace package body dynamic_pivot_etl_unit_testing
as
    g_codebase varchar2(100) := 'poc refactored (version 1)';

    g_show_columns boolean := false;

    procedure clear_all_test_data
    is
    begin
        delete from dynamic_pivot_pair_values;
        commit;
    end clear_all_test_data;

    procedure reset_test_data
    (
        p_delete_triangle_polygon in boolean default false, 
        p_delete_circle_square_rectangle in boolean default false,
        p_load_3d_shapes in boolean default false
    )
    is
    begin

        --load the full datasource and delete all pair|values for item_type triangles and regular polygons
        dynamic_pivot_etl.reload_table_pair_value_source(p_execute => true, p_load_3d_shapes => p_load_3d_shapes);
        
        if p_delete_triangle_polygon then        
            delete from dynamic_pivot_pair_values where item_type in ('triangle', 'regular polygon');
            commit;
        end if;
        
        if p_delete_circle_square_rectangle then
            delete from dynamic_pivot_pair_values where item_type in ('circle', 'square', 'rectangle');
            commit;
        end if;

    end reset_test_data;

    procedure stop_test_and_print_result
    (
        p_dynamic_table in varchar2
    )
    is
        l_pivoted_rows number;
        l_pair_values number;
        l_columns number;
        l_timing_result varchar2(1000);
        l_result varchar2(1000);
    begin
        --stop the test timer and summarize all results
        dynamic_pivot_test_framework.timing_stop;
        --get formatted timing result (adds it to test_info)
        l_timing_result := dynamic_pivot_test_framework.timing_result;

        dynamic_pivot_test_framework.add_rowcount_to_results(p_source => 'dynamic_pivot_pair_values', p_key => 'pairValuesTable');
        dynamic_pivot_test_framework.add_rowcount_to_results(p_source => p_dynamic_table, p_key => 'dynamicTable');
        dynamic_pivot_test_framework.add_columns_to_results(p_source => p_dynamic_table, p_key => 'dynamicTableFinalColumns');
        
        l_pair_values := dynamic_pivot_test_framework.get_row_count('dynamic_pivot_pair_values');
        l_pivoted_rows := dynamic_pivot_test_framework.get_row_count(p_dynamic_table);
        l_columns := dynamic_pivot_test_framework.get_column_count(p_dynamic_table);
        l_result := l_timing_result || ' to pivot ' || l_pair_values || ' name|value pairs to ' || l_pivoted_rows || ' rows with ' || l_columns || ' columns';
        
        dynamic_pivot_test_framework.print_comment(p_comment => l_result);
        if g_show_columns then
            dbms_output.put_line(dynamic_pivot_test_framework.get_columns(p_dynamic_table));
        end if;
        
        dynamic_pivot_test_framework.test_results_stop_record(l_result);
    end stop_test_and_print_result;

    procedure start_test
    (
        p_dynamic_table in varchar2,
        p_test_set in varchar2 default null,
        p_test_group in varchar2 default null
    )
    is
    begin
        dynamic_pivot_test_framework.test_results_start_record(p_test_name => 'etl_pivot_to_dynamic_columns', p_test_set => p_test_set, p_test_group => p_test_group);        
        dynamic_pivot_test_framework.add_columns_to_setup(p_source => p_dynamic_table, p_key => 'dynamicTableInitialColumns');
        dynamic_pivot_test_framework.timing_start;
    end start_test;
        
    procedure test_initialize_data
    is
    begin
--        dynamic_pivot_test_framework.print_comment(p_comment => 'reset test data with no pair values for triangle, regular polygon, circle, square or rectangle');
        reset_test_data(p_delete_triangle_polygon => true, p_delete_circle_square_rectangle => true);
    end test_initialize_data;

    procedure prepare_test_1
    is
    begin
--        dynamic_pivot_test_framework.print_comment(p_comment => 'reset test data: add pair values for triangle and regular polygon; delete pair values for circle, square and rectangle');
        reset_test_data(p_delete_triangle_polygon => false, p_delete_circle_square_rectangle => true);    
    end prepare_test_1;

    procedure prepare_test_2
    is
    begin
--        dynamic_pivot_test_framework.print_comment(p_comment => 'reset test data to full dataset: add pair values for triangle and regular polygon; add pair values for circle, square and rectangle');
        reset_test_data(p_delete_triangle_polygon => false, p_delete_circle_square_rectangle => false);    
    end prepare_test_2;
    
    procedure prepare_test_3
    is
    begin
--        dynamic_pivot_test_framework.print_comment(p_comment => 'reset test data to full dataset: all 2d shapes and 3d solids');
        reset_test_data(p_delete_triangle_polygon => false, p_delete_circle_square_rectangle => false, p_load_3d_shapes => true); 
    end prepare_test_3;
    
    procedure run_test_json_table
    (
        p_set in varchar2 default null,
        p_group in varchar2 default null
    )
    is
        l_dynamic_table varchar2(128) := 'dynamic_columns_json_table';
    begin
        start_test(p_dynamic_table => l_dynamic_table, p_test_set => p_set, p_test_group => p_group);
        dynamic_pivot_etl.rebuild_table_json_table(p_execute => true);        
        stop_test_and_print_result(p_dynamic_table => l_dynamic_table);
    end run_test_json_table;

    procedure test_json_table
    is
        l_test_set varchar2(100) := 'DYNAMIC TABLE COLUMNS PIVOT DYNAMIC VIEW JSON TABLE VIEW ROWSOURCE FLAT JSON';
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => true);
        
        dynamic_pivot_test_framework.testing_headline(p_headline => 'dynamically creating source view to pivot row name|value pairs from flat json to columns using json table');

        clear_all_test_data;
        dynamic_pivot_etl.rebuild_table_json_table(p_execute => true);        
        test_initialize_data;
        run_test_json_table(p_set => l_test_set, p_group => 'minimal dataset');
        prepare_test_1;        
        run_test_json_table(p_set => l_test_set, p_group => 'small dataset');
        prepare_test_2;
        run_test_json_table(p_set => l_test_set, p_group => 'large dataset');        
        prepare_test_3;
        run_test_json_table(p_set => l_test_set, p_group => 'full dataset');
        
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => false);
    
    end test_json_table;

    procedure run_test_pipelined
    (
        p_set in varchar2 default null,
        p_group in varchar2 default null
    )
    is
        l_dynamic_table varchar2(128) := 'dynamic_columns_pipelined';
    begin
        start_test(p_dynamic_table => l_dynamic_table, p_test_set => p_set, p_test_group => p_group);
        dynamic_pivot_etl.rebuild_table_pipelined(p_execute => true);
        stop_test_and_print_result(p_dynamic_table => l_dynamic_table);
    end run_test_pipelined;

    procedure test_pipelined
    is
        l_test_set varchar2(100) := 'DYNAMIC TABLE COLUMNS PIVOT PIPELINED OBJECT TYPES AND SUBTYPES ROWSOURCE NESTED TABLE';
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => true);
        
        dynamic_pivot_test_framework.testing_headline(p_headline => 'using pipelined function to pivot row name|value pairs from nested tables to object hierarchy');
        dynamic_pivot_test_framework.print_comment(p_comment => 'rowsource not currently dynamic, contains all columns');
        
        clear_all_test_data;
        dynamic_pivot_etl.rebuild_table_pipelined(p_execute => true);        

        test_initialize_data;
        run_test_pipelined(p_set => l_test_set, p_group => 'minimal dataset');
        prepare_test_1;        
        run_test_pipelined(p_set => l_test_set, p_group => 'small dataset');
        prepare_test_2;
        run_test_pipelined(p_set => l_test_set, p_group => 'large dataset');
        prepare_test_3;
        run_test_pipelined(p_set => l_test_set, p_group => 'full dataset');

        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => false);
    
    end test_pipelined;

    procedure run_test_polymorphic
    (
        p_set in varchar2 default null,
        p_group in varchar2 default null
    )
    is
        l_dynamic_table varchar2(128) := 'dynamic_columns_polymorphic';
    begin
        start_test(p_dynamic_table => l_dynamic_table, p_test_set => p_set, p_test_group => p_group);
        dynamic_pivot_etl.rebuild_table_polymorphic(p_execute => true);
        stop_test_and_print_result(p_dynamic_table => l_dynamic_table);        
    end run_test_polymorphic;
    
    procedure test_polymorphic
    is
        l_test_set varchar2(100) := 'DYNAMIC TABLE COLUMNS PIVOT POLYMORPHIC COLUMNS PUT ROWSOURCE FLAT JSON';
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => true);    
        dynamic_pivot_test_framework.testing_headline(p_headline => 'using polymorphic function to pivot row name|value pairs to columns using flat json for name|value pairs');

        clear_all_test_data;
        dynamic_pivot_etl.rebuild_table_polymorphic(p_execute => true);        

        test_initialize_data;
        run_test_polymorphic(p_set => l_test_set, p_group => 'minimal dataset');
        prepare_test_1;        
        run_test_polymorphic(p_set => l_test_set, p_group => 'small dataset');
        prepare_test_2;
        run_test_polymorphic(p_set => l_test_set, p_group => 'large dataset');
        prepare_test_3;
        run_test_polymorphic(p_set => l_test_set, p_group => 'full dataset');


        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => false);

    end test_polymorphic;

    procedure run_test_polymorphic_objectagg
    (
        p_set in varchar2 default null,
        p_group in varchar2 default null
    )
    is
        l_dynamic_table varchar2(128) := 'dynamic_columns_polymorphic_objectagg';
    begin
        start_test(p_dynamic_table => l_dynamic_table, p_test_set => p_set, p_test_group => p_group);
        dynamic_pivot_etl.rebuild_table_polymorphic_objectagg(p_execute => true);
        stop_test_and_print_result(p_dynamic_table => l_dynamic_table);
    end run_test_polymorphic_objectagg;

    
    procedure test_polymorphic_objectagg
    is
        l_test_set varchar2(100) := 'DYNAMIC TABLE COLUMNS PIVOT POLYMORPHIC ROWSET PUT ROWSOURCE NESTED JSON';
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => true);
        dynamic_pivot_test_framework.testing_headline(p_headline => 'polymorphic pivot row name|value pairs to columns using nested json for name|value pairs');

        clear_all_test_data;
        dynamic_pivot_etl.rebuild_table_polymorphic_objectagg(p_execute => true);        

        test_initialize_data;
        run_test_polymorphic_objectagg(p_set => l_test_set, p_group => 'minimal dataset');
        prepare_test_1;        
        run_test_polymorphic_objectagg(p_set => l_test_set, p_group => 'small dataset');
        prepare_test_2;
        run_test_polymorphic_objectagg(p_set => l_test_set, p_group => 'large dataset');
        prepare_test_3;
        run_test_polymorphic_objectagg(p_set => l_test_set, p_group => 'full dataset');


        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => false);

    end test_polymorphic_objectagg;

    procedure run_test_polymorphic_row
    (
        p_set in varchar2 default null,
        p_group in varchar2 default null
    )
    is
        l_dynamic_table varchar2(128) := 'dynamic_columns_polymorphic_row';
    begin
        start_test(p_dynamic_table => l_dynamic_table, p_test_set => p_set, p_test_group => p_group);
        dynamic_pivot_etl.rebuild_table_polymorphic_row(p_execute => true);
        stop_test_and_print_result(p_dynamic_table => l_dynamic_table);
    end run_test_polymorphic_row;
    
    procedure test_polymorphic_row
    is
        l_test_set varchar2(100) := 'DYNAMIC TABLE COLUMNS PIVOT POLYMORPHIC ROWSET PUT ROWSOURCE FLAT JSON';
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => true);
        dynamic_pivot_test_framework.testing_headline(p_headline => 'polymorphic pivot row name|value pairs to columns using flat json for name|value pairs');

        clear_all_test_data;
        dynamic_pivot_etl.rebuild_table_polymorphic_row(p_execute => true);        

        test_initialize_data;
        run_test_polymorphic_row(p_set => l_test_set, p_group => 'minimal dataset');
        prepare_test_1;        
        run_test_polymorphic_row(p_set => l_test_set, p_group => 'small dataset');
        prepare_test_2;
        run_test_polymorphic_row(p_set => l_test_set, p_group => 'large dataset');
        prepare_test_3;
        run_test_polymorphic_row(p_set => l_test_set, p_group => 'full dataset');

        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_set, p_start => false);

    end test_polymorphic_row;

    procedure run_all_tests(p_show_columns in boolean default false)
    is
        l_test_set varchar2(100) := 'DYNAMIC TABLE COLUMNS FROM ROW PIVOT COMPARISON: RUN ALL TESTS';
    begin
        g_show_columns := p_show_columns;
    
        dynamic_pivot_test_framework.testing_set_banner(p_heading => l_test_set, p_start => true);

        test_pipelined;
        test_polymorphic;
        test_polymorphic_objectagg;
        test_polymorphic_row;        
        test_json_table;
        
        dynamic_pivot_test_framework.testing_set_banner(p_heading => l_test_set, p_start => false);

    end run_all_tests;

begin
    dynamic_pivot_test_framework.verify_codebase(g_codebase);
end dynamic_pivot_etl_unit_testing;