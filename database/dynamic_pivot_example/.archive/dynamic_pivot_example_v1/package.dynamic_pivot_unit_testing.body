create or replace package body dynamic_pivot_unit_testing
as

    g_codebase      constant varchar2(100) := 'poc refactored (version 1)';
    g_dataset_small constant varchar2(100) := 'small dataset';
    g_dataset_large constant varchar2(100) := 'large dataset';
    g_dataset_full  constant varchar2(100) := 'full dataset';

    procedure test_initial_data_generation
    is
        l_test_group varchar2(100) := 'GENERATE TEST DATA NAME VALUE PAIRS AND CONSOLIDATE TO ROWS';
        l_unit_set varchar2(100);
        l_set varchar2(1000);
        l_comment varchar2(1000);
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_group, p_start => true);
        dynamic_pivot_test_framework.testing_headline(p_headline => 'convert multiple name|value pair details per item to consolidated rowsource per item');
        
        l_unit_set := 'GENERATE TEST DATA: NAME|VALUE PAIRS';    
        l_comment := 'generate name|value rows using json source document created in plsql';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(plsql)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_test_data_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_test_data_large_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_test_data_xlarge_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);
        
        l_unit_set := 'CONSOLIDATE TEST DATA: NAME|VALUE PAIRS';        
        
        l_comment := 'consolidate name|value pairs to row json using sql and json_arrayagg (creates hierarchical json)';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(sql json_arrayagg)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_data_to_json_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_data_to_json_large_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_data_to_json_xlarge_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);

        l_comment := 'consolidate name|value pairs to row json using sql and json_objectagg (creates nested json)';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(sql json_objectagg)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_data_to_json_v_objectagg',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_data_to_json_v_objectagg_large',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_data_to_json_v_objectagg_xlarge', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);

        l_comment := 'consolidate name|value pairs to row json using plsql AND to nested tables using objects';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(nested table objects)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_item_object_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_item_object_large_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_item_object_xlarge_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_group, p_start => false);    
    
    end test_initial_data_generation;

    procedure test_pipelined
    is
        l_test_group varchar2(100) := 'ROW PIVOT WITH PIPELINED TABLE FUNCTIONS';    
        l_unit_set varchar2(100) := 'ROW PIVOT WITH PIPELINED OBJECT TYPES AND SUBTYPES';
        l_set varchar2(1000);
        l_comment varchar2(1000);
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_group, p_start => true);
        dynamic_pivot_test_framework.testing_headline(p_headline => 'using pipelined function to pivot row name|value pairs to object hierarchy');
        
        l_comment := 'rowsource nested tables pipelined to object type hierarchy (avoids json completely)';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);      
        l_set := l_unit_set || '(pipelined nested objects source)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_pipeline_objects_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_pipeline_objects_large_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_pipeline_objects_xlarge_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);
        
        l_comment := 'rowsource flat json pipelined to object type hierarchy';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(pipelined json source)';
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_pipeline_objects_json_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_pipeline_objects_json_large_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_pipeline_objects_json_xlarge_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_group, p_start => false);
    
    end test_pipelined;

    procedure test_polymorphic
    is
        l_test_group varchar2(100) := 'ROW PIVOT WITH POLYMORPHIC TABLE FUNCTIONS';    
        l_unit_set varchar2(100) := 'ROW PIVOT USING POLYMORPHIC TABLE FUNCTIONS';
        l_set varchar2(1000);
        l_comment varchar2(500);    
    begin
    
        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_group, p_start => true);
        dynamic_pivot_test_framework.print_comment(p_comment => 'using polymorphic function to pivot row name|value pairs from json rowsource');
        
        l_comment := 'rowsource hierarchical json (uses json array_t) polymorphic put columns to varchar only';        
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(ptf_c_source_hier_json_arrayagg)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_large_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_xlarge_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);
         
        l_comment := 'rowsource hierarchical json (uses json_array_t) polymorphic put columns to varchar|number';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(ptf_ct_source_hier_json_arrayagg)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_large_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_xlarge_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);
    
        l_comment := 'rowsource flat json polymorphic put columns to varchar only';        
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(ptf_c_source_flat_json)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_flat_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_large_flat_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_xlarge_flat_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);
        
        l_comment := 'rowsource flat json polymorphic put columns to varchar|number';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(ptf_ct_source_flat_json)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_flat_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_large_flat_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_xlarge_flat_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);

        l_comment := 'rowsource nested json (with json_objectagg) polymorphic put rowset to varchar|number (2 json_object parses per row)';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(ptf_rt_source_nested_json_objectagg)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_objectagg_rows_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_objectagg_rows_v_large',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_objectagg_rows_v_xlarge', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);

        l_comment := 'rowsource flat json polymorphic put rowset to varchar|number (1 json_object parse per row';
        dynamic_pivot_test_framework.print_comment(p_comment => l_comment);
        l_set := l_unit_set || '(ptf_rt_source_flat_json)';        
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_flat_rows_v',        p_set => l_set, p_group => g_dataset_small, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_large_flat_rows_v',  p_set => l_set, p_group => g_dataset_large, p_comment => l_comment);
        dynamic_pivot_test_framework.test_rowcount_timing('dynamic_pivot_polymorphic_typed_xlarge_flat_rows_v', p_set => l_set, p_group => g_dataset_full, p_comment => l_comment);

        dynamic_pivot_test_framework.testing_banner(p_heading => l_test_group, p_start => false);

    end test_polymorphic;

    procedure run_all_tests
    is
        l_test_set varchar2(100) := 'DYNAMIC ROW TO COLUMN PIVOT COMPARISON: RUN ALL TESTS';
    begin
    
        dynamic_pivot_test_framework.testing_set_banner(p_heading => l_test_set, p_start => true);

        test_initial_data_generation;

        test_polymorphic;
        test_pipelined;
        
        dynamic_pivot_test_framework.testing_set_banner(p_heading => l_test_set, p_start => false);

    end run_all_tests;

begin
    dynamic_pivot_test_framework.verify_codebase(g_codebase);
end dynamic_pivot_unit_testing;
