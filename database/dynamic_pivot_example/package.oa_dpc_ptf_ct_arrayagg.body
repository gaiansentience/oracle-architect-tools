create or replace package body oa_dpc_ptf_ct_arrayagg as
    
    type r_columns is record(column_name varchar2(100), column_type varchar2(25));
    type t_columns is table of r_columns index by pls_integer;
    g_columns t_columns;
    
    procedure fetch_column_names
    (
        p_new_columns_query  in varchar2
    )
    is
        l_columns_rc sys_refcursor;
    begin
    
        open l_columns_rc for p_new_columns_query;
        
        fetch l_columns_rc
        bulk collect into g_columns;
        
        close l_columns_rc;
        
    end fetch_column_names;    
    
    procedure define_new_columns
    (
        p_new_columns in out nocopy dbms_tf.columns_new_t
    )
    is
    begin
    
        for i in 1..g_columns.count loop
            --column names are based on json keys made from key-value pairs
            --quote them so they work when searching the json data
            if g_columns(i).column_type = 'number' then
                p_new_columns(i) := dbms_tf.column_metadata_t(name=> '"' || g_columns(i).column_name || '"', type => dbms_tf.type_number);
            else
                p_new_columns(i) := dbms_tf.column_metadata_t(name=> '"' || g_columns(i).column_name || '"', type => dbms_tf.type_varchar2);
            end if;
        end loop;
        
    end define_new_columns;
    
    function describe
    (
        p_table in out dbms_tf.table_t,
        p_show_columns in dbms_tf.columns_t,
        p_json_source_column in dbms_tf.columns_t,
        p_new_columns_query  in varchar2
    ) return dbms_tf.describe_t 
    is
        l_new_columns dbms_tf.columns_new_t := dbms_tf.columns_new_t();
    begin

        fetch_column_names(p_new_columns_query);
        define_new_columns(l_new_columns);

        for i in 1..p_table.column.count loop
            --set pass through if column is in the show_columns collection
            if p_table.column(i).description.name member of p_show_columns then
                p_table.column(i).pass_through := true;
            else
                p_table.column(i).pass_through := false;
            end if;
    
            --only set the source data column to read
            if p_table.column(i).description.name = p_json_source_column(1) then
                p_table.column(i).for_read := true;
            else
                p_table.column(i).for_read := false;
            end if;
        end loop;

        return dbms_tf.describe_t(new_columns => l_new_columns);

    end describe;

    procedure open 
    is
    begin
        null;
    end open;

    function get_column_value_number
    (
        p_row_json_source in out nocopy clob,
        p_key in varchar2
    ) return varchar2
    is
        o json_object_t;
        a json_array_t;
        e json_object_t;
        l_column_value number;
    begin
        o := json_object_t(p_row_json_source);
        --value pairs are stored in an array
        a := o.get_array('itemValues');
        if a.get_size > 0 then
            for i in 0..a.get_size - 1 loop
                e := json_object_t(a.get(i));
                if e.has(p_key) then
                    --found a value for this key (column)
                    l_column_value := e.get_number(p_key);
                    exit;
                end if;
            end loop;
        end if;
        return l_column_value;
    end get_column_value_number;


    function get_column_value_string
    (
        p_row_json_source in out nocopy clob,
        p_key in varchar2
    ) return varchar2
    is
        o json_object_t;
        a json_array_t;
        e json_object_t;
        l_column_value varchar2(4000);
    begin
        o := json_object_t(p_row_json_source);
        --value pairs are stored in an array
        a := o.get_array('itemValues');
        if a.get_size > 0 then
            for i in 0..a.get_size - 1 loop
                e := json_object_t(a.get(i));
                if e.has(p_key) then
                    --found a value for this key (column)
                    l_column_value := e.get_string(p_key);
                    exit;
                end if;
            end loop;
        end if;
        return l_column_value;
    end get_column_value_string;

    procedure fetch_rows
    (
        p_new_columns_query  in varchar2
    )
    is
        l_current_rows dbms_tf.row_set_t;
        l_new_column_varchar2 dbms_tf.tab_varchar2_t;
        l_new_column_number dbms_tf.tab_number_t;
        l_row_count pls_integer;
    begin
    
        dbms_tf.get_row_set(l_current_rows, row_count => l_row_count);

        for column_index in 1..g_columns.count loop
            --clear any column values from previous column
            l_new_column_varchar2.delete;
            l_new_column_number.delete;
            --set the value in this column to null or a value if one exists
            --use number if column is defined as number, otherwise use varchar
            for row_index in 1 .. l_row_count loop
                if g_columns(column_index).column_type = 'number' then
                    l_new_column_number(row_index) := get_column_value_number(l_current_rows(1).tab_clob(row_index), g_columns(column_index).column_name);
                else
                    l_new_column_varchar2(row_index) := get_column_value_string(l_current_rows(1).tab_clob(row_index), g_columns(column_index).column_name);                
                end if;
            end loop;
            --put the values in this column into the rowset being fetched
            if g_columns(column_index).column_type = 'number' then
                dbms_tf.put_col(column_index, l_new_column_number);
            else
                dbms_tf.put_col(column_index, l_new_column_varchar2);            
            end if;
        end loop;

    end fetch_rows;

    procedure close 
    is
    begin
        null;
    end close;

end oa_dpc_ptf_ct_arrayagg;