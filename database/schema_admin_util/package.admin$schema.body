create or replace package body admin$schema
as

    procedure run_ddl
    (
        p_ddl in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
    begin
    
        if p_script then
            dbms_output.put_line(p_ddl);
        end if;
    
        if p_execute then
            execute immediate p_ddl;
        end if;
    
    end run_ddl;

    function get_synonym_ddl
    (
        p_synonym_name in varchar2, 
        p_object in varchar2, 
        p_owner in varchar2, 
        p_public in boolean default false
    ) return varchar2
    is
        l_ddl varchar2(1000);
    begin
          --CREATE OR REPLACE [PUBLIC] SYNONYM [user].synonym_name FOR owner.object;
        l_ddl := 'CREATE OR REPLACE ';
        if p_public then
            l_ddl := l_ddl || 'PUBLIC ';
        end if;
        l_ddl := l_ddl || 'SYNONYM ';
        if not p_public then
            l_ddl := l_ddl || user || '.';
        end if;
        l_ddl := l_ddl || p_synonym_name || ' FOR ' || p_owner || '.' || p_object;
        
        return l_ddl;
    
    end get_synonym_ddl;

    function public_synonym_exists
    (
        p_view_name in varchar2
    ) return boolean
    is
        l_count number := 0;
    begin
    
        select count(*) into l_count 
        from all_synonyms
        where owner = 'PUBLIC'
        and synonym_name = p_view_name
        and rownum = 1;
        --is there a public synonym with this name
        --really just using count to check for existence
      
        return (l_count = 1);
    
    end public_synonym_exists;


    procedure create_public_synonyms
    (
        p_tables in boolean default true,
        p_views in boolean default true,
        p_materialized_views in boolean default true,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_ddl varchar2(1000);
        l_owner varchar2(30) := user;
    
        cursor c_tables is
            select table_name as object_name 
            from user_tables 
            where table_name not in 
                (
                select mview_name
                from user_mviews
                )
            order by table_name;
    
        cursor c_views is
            select view_name as object_name
            from user_views
            order by view_name;
    
        cursor c_mviews is
            select mview_name as object_name
            from user_mviews
            order by mview_name;
    
    begin
    
        if p_tables then
            for r in c_tables loop 
                l_ddl := get_synonym_ddl(p_synonym_name => l_owner || '_' || r.object_name, p_object => r.object_name, p_owner => l_owner, p_public => true);    
                run_ddl(l_ddl, p_script, p_execute);
            end loop;
        end if;
    
        if p_views then
            for r in c_views loop 
                l_ddl := get_synonym_ddl(p_synonym_name => l_owner || '_' || r.object_name, p_object => r.object_name, p_owner => l_owner, p_public => true);    
                run_ddl(l_ddl, p_script, p_execute);
            end loop;
        end if;
    
        if p_materialized_views then
            for r in c_mviews loop 
                l_ddl := get_synonym_ddl(p_synonym_name => l_owner || '_' || r.object_name, p_object => r.object_name, p_owner => l_owner, p_public => true);    
                run_ddl(l_ddl, p_script, p_execute);
            end loop;
        end if;
    
    end create_public_synonyms;

    procedure grant_privileges_on_object
    (
        p_privileges in varchar2,
        p_owner in varchar2, 
        p_object in varchar2, 
        p_user in varchar2, 
        p_script in boolean default true, 
        p_execute in boolean default false
    )
    is
        l_grant varchar2(1000);
    begin
        l_grant := 'GRANT ' || p_privileges || ' ON ' || p_owner || '.' || p_object || ' TO ' || p_user;
        run_ddl(l_grant, p_script, p_execute);
    end grant_privileges_on_object;
    
    procedure grant_execute_on_object
    (
        p_owner in varchar2, 
        p_object in varchar2, 
        p_user in varchar2, 
        p_script in boolean default true, 
        p_execute in boolean default false
    )
    is
    begin
        grant_privileges_on_object(p_privileges => 'EXECUTE', p_owner => p_owner, p_object => p_object, p_user => p_user, p_script => p_script, p_execute => p_execute);
    end grant_execute_on_object;
    
    procedure grant_select_on_object
    (
        p_owner in varchar2, 
        p_object in varchar2, 
        p_user in varchar2, 
        p_script in boolean default true, 
        p_execute in boolean default false
    )
    is
    begin
        grant_privileges_on_object(p_privileges => 'SELECT', p_owner => p_owner, p_object => p_object, p_user => p_user, p_script => p_script, p_execute => p_execute);
    end grant_select_on_object;

    procedure grant_dml_on_object
    (
        p_owner in varchar2, 
        p_object_name in varchar2, 
        p_user in varchar2, 
        p_insert in boolean default true,
        p_update in boolean default true,
        p_delete in boolean default true,
        p_script in boolean default true, 
        p_execute in boolean default false
    )
    is
        l_privileges varchar2(100);
    begin
        if p_insert then
            l_privileges := 'INSERT,';
        end if;
        if p_update then
            l_privileges := l_privileges || 'UPDATE,';
        end if;
        if p_delete then
            l_privileges := l_privileges || 'DELETE';
        end if;
        l_privileges := rtrim(l_privileges,',');
        grant_privileges_on_object(p_privileges => l_privileges, p_owner => p_owner, p_object => p_object_name, p_user => p_user, p_script => p_script, p_execute => p_execute);
    end grant_dml_on_object;
    
    procedure grant_dml_privileges
    (
        p_user in varchar2,
        p_tables in boolean default false,
        p_views in boolean default true,
        p_insert in boolean default true,
        p_update in boolean default true,
        p_delete in boolean default true,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_owner varchar2(30) := user;
    
        cursor c_tables is
            select table_name as object_name
            from user_tables
            where table_name not in
                (
                select mview_name
                from user_mviews
                )
            order by table_name;
    
        cursor c_views is
            select view_name as object_name
            from user_views
            order by view_name;
    
    begin
    
        if p_tables then
            for r in c_tables loop
                grant_dml_on_object(l_owner, r.object_name, p_user, p_insert, p_update, p_delete, p_script, p_execute);
            end loop;
        end if;
    
        if p_views then
            for r in c_views loop
                grant_dml_on_object(l_owner, r.object_name, p_user, p_insert, p_update, p_delete, p_script, p_execute);
            end loop;
        end if;
    
    end grant_dml_privileges;

    procedure grant_select_privileges
    (
        p_user in varchar2,
        p_tables in boolean default false,
        p_views in boolean default true,
        p_materialized_views in boolean default true,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_owner varchar2(30) := user;
    
        cursor c_tables is
            select table_name as object_name
            from user_tables
            where table_name not in
                (
                    select mview_name
                    from user_mviews
                )
            order by table_name;
    
        cursor c_views is
            select view_name as object_name
            from user_views
            order by view_name;
    
        cursor c_mviews is
            select mview_name as object_name
            from user_mviews
            order by mview_name;
    
    begin
    
        if p_tables then
            for r in c_tables loop
                grant_select_on_object(l_owner, r.object_name, p_user, p_script, p_execute);
            end loop;
        end if;
    
        if p_views then
            for r in c_views loop
                grant_select_on_object(l_owner, r.object_name, p_user, p_script, p_execute);
            end loop;
        end if;
    
        if p_materialized_views then
            for r in c_mviews loop
                grant_select_on_object(l_owner, r.object_name, p_user, p_script, p_execute);
            end loop;
        end if;
    
    end grant_select_privileges;

    procedure create_view_as_select
    (
        p_owner in varchar2,
        p_object_name in varchar2,
        p_user in varchar2,
        p_view_name in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_ddl varchar2(1000);
    begin
        --CREATE OR REPLACE VIEW SH_SALES_V AS SELECT * FROM SH.SALES;
        l_ddl := 'CREATE OR REPLACE VIEW ' || p_user || '.' || p_view_name;
        l_ddl := l_ddl || ' AS SELECT * FROM ' || p_owner || '.' || p_object_name;
        --dont create user views that duplicate public synonyms
        if not public_synonym_exists(p_view_name) then
            run_ddl(l_ddl, p_script, p_execute);
        end if;
    end create_view_as_select;

    procedure create_views_for_user
    (
        p_user in varchar2,
        p_tables in boolean default true,
        p_views in boolean default true,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_view_name varchar2(128);
        l_owner varchar2(30) := user;

        cursor  c_tables is
            select table_name 
            from user_tables 
            where table_name not in
                (
                    select mview_name
                    from user_mviews
                )
        order by table_name;

        cursor c_views is
            select 
                view_name, rtrim(view_name,'_V') user_view_base
                from user_views
            order by view_name;

    begin

        if p_tables then
            --build user views for tables
            for r in c_tables loop 
                l_view_name := l_owner || '_' || r.table_name || '_V';
                create_view_as_select(l_owner, r.table_name, p_user, l_view_name, p_script, p_execute);
            end loop;
        end if;

        if p_views then
            --build user views for tables
            for r in c_views loop 
                l_view_name := l_owner || '_' || r.user_view_base || '_V';
                create_view_as_select(l_owner, r.view_name, p_user, l_view_name, p_script, p_execute);
            end loop;
        end if;

    end create_views_for_user;

    function table_exists
    (
        p_table in varchar2
    ) return boolean
    is
        l_count number := 0;
    begin
    
        select count(*) 
        into l_count
        from user_tables
        where 
            table_name = p_table
            and rownum = 1;
        --use rownum = 1 to stop when a table is found
        --only using count to verify existence of table
      
        return (l_count = 1);
    end table_exists; 

    function table_rowcount
    (
        p_table in varchar2
    ) return number
    is
        l_dml varchar2(1000);
        i number;
    begin
        l_dml := 'SELECT COUNT(*) FROM ' || p_table;
        execute immediate l_dml into i;
        return i;
    end table_rowcount;

    function table_rowcounts_match
    (
        p_table in varchar2,
        p_compare_table in varchar2
    ) return boolean
    is
        i_table number;
        i_compare number;
    begin
    
        i_table := table_rowcount(p_table);
        i_compare := table_rowcount(p_compare_table);
      
        return (i_table = i_compare);
    
    end table_rowcounts_match;

    function get_table_drop_ddl
    (
        p_table in varchar2,
        p_purge_storage in boolean default false
    ) return varchar2
    is
        l_ddl varchar2(1000);
    begin
        l_ddl := 'DROP TABLE ' || p_table;
        if p_purge_storage then
            l_ddl := l_ddl || ' PURGE';
        end if;
        return l_ddl;
    end get_table_drop_ddl;

    function get_create_table_as_select
    (
        p_source_table in varchar2,
        p_suffix in varchar2 default 'TEMP',
        p_create_empty in boolean default true,
        p_tablespace in varchar2 default null,
        p_logging in boolean default true,
        p_compress in boolean default false
    ) return varchar2
    is
        l_ddl varchar2(4000);
        l_owner varchar2(30) := user;
    begin
    
        l_ddl := 'CREATE TABLE ' || l_owner || '.' || p_source_table || '_' || p_suffix;
        if p_tablespace is not null then
            l_ddl := l_ddl || ' TABLESPACE ' || p_tablespace;
        end if;
        if p_compress then
            l_ddl := l_ddl || ' COMPRESS BASIC';
        end if;
        if p_logging then
            l_ddl := l_ddl || ' LOGGING';
        else
            l_ddl := l_ddl || ' NOLOGGING';
        end if;
        l_ddl := l_ddl || ' AS SELECT  * FROM ' || p_source_table;
        if p_create_empty then
            l_ddl := l_ddl || ' WHERE 1 = 0';
        end if;
        return l_ddl;
    
    end get_create_table_as_select;

    function get_table_truncate_ddl
    (
        p_table in varchar2,
        p_drop_storage in boolean default true,
        p_cascade in boolean default false
    ) return varchar2
    is
        l_ddl varchar2(1000);
    begin
    
        l_ddl := 'TRUNCATE TABLE ' || p_table;
        if p_drop_storage then
            l_ddl := l_ddl || ' DROP STORAGE';
        else
            l_ddl := l_ddl || ' REUSE STORAGE';
        end if;
        if p_cascade then
            l_ddl := l_ddl || ' CASCADE';
        end if;
    
        return l_ddl;
    end get_table_truncate_ddl;

    function get_insert_dml
    (
        p_target_table in varchar2,
        p_source_table in varchar2,
        p_direct_path_load in boolean default true
    ) return varchar2
    is
        l_ddl varchar2(32000);
        l_columns varchar2(32000);
        l_insert varchar2(32000);
        l_select varchar2(32000);
    
        cursor c_columns is
            select tc.column_name
            from  user_tab_columns tc
            where tc.table_name = p_source_table
            order by tc.column_id;
    
    begin
        --insert /*+APPEND*/ into target_table (c1,c2,c3) select c1,c2,c3 from source_table
        --get the set of columns using the source table
        for c in c_columns loop            
            l_columns := l_columns || case when l_columns is null then null else ', ' end || c.column_name;
        end loop;
    
        l_insert := 'INSERT ';
        if p_direct_path_load then
            l_insert := l_insert || '/*+APPEND*/';
        end if;
    
        l_insert := l_insert || ' INTO ' || p_target_table || '(' || l_columns || ')';
        l_select := ' SELECT ' || l_columns || ' FROM ' || p_source_table;
        return (l_insert || l_select);
    
    end get_insert_dml;

    procedure alter_table_foreign_key
    (
        p_owner in varchar2,
        p_table in varchar2,
        p_constraint in varchar2,
        p_enabled in boolean default false,
        p_validate in boolean default false,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_ddl varchar2(1000);
    begin
      --ALTER TABLE SH.COSTS ENABLE  CONSTRAINT COSTS_FK_TIMES
      --ALTER TABLE SH.COSTS ENABLE NOVALIDATE  CONSTRAINT COSTS_FK_TIMES
      --ALTER TABLE SH.COSTS DISABLE  CONSTRAINT COSTS_FK_TIMES
      --ALTER TABLE SH.COSTS DISABLE VALIDATE  CONSTRAINT COSTS_FK_TIMES
      
        l_ddl := 'ALTER TABLE ' || p_owner || '.' || p_table;
        case 
            when p_enabled and p_validate then
                l_ddl := l_ddl || ' ENABLE';
            when p_enabled and not p_validate then
                l_ddl := l_ddl || ' ENABLE NOVALIDATE';
            when not p_enabled and not p_validate then
                l_ddl := l_ddl || ' DISABLE';
            when not p_enabled and p_validate then
                l_ddl := l_ddl || ' DISABLE VALIDATE';
        end case;
        l_ddl := l_ddl || ' CONSTRAINT ' || p_constraint;  
        run_ddl(l_ddl, p_script, p_execute);
      
    end alter_table_foreign_key;

    procedure alter_related_foreign_keys
    (
        p_referenced_table in varchar2,
        p_enabled in boolean default false,
        p_validate in boolean default false,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_owner varchar2(30) := user;
    
        cursor c_foreign_keys is
            select 
                fk.owner, 
                fk.constraint_name, 
                fk.table_name 
            from 
                all_constraints fk, 
                all_constraints pk 
            where 
                fk.CONSTRAINT_TYPE = 'R' 
                and pk.owner = l_owner 
                and fk.r_owner = pk.owner
                and fk.R_CONSTRAINT_NAME = pk.CONSTRAINT_NAME
                and pk.TABLE_NAME = p_referenced_table;
    begin
    
        for r in c_foreign_keys loop
            alter_table_foreign_key(r.owner, r.table_name, r.constraint_name, p_enabled, p_validate, p_script, p_execute);
        end loop;
      
    end alter_related_foreign_keys;

    procedure move_table
    (
        p_table in varchar2,
        p_update_indexes in boolean default false,
        p_move_online in boolean default false,
        p_script in boolean default true,
        p_execute in boolean default false,
        p_tablespace in varchar2 default null
    )
    is
        l_ddl varchar2(1000);
        l_owner varchar2(30) := user;
    begin
        --alter table "SH"."CHANNELS" move tablespace "SALES_HISTORY_STAGING"
        l_ddl := 'ALTER TABLE ' || l_owner || '.' || p_table || ' MOVE';
        if p_tablespace is not null then
            l_ddl := l_ddl || ' TABLESPACE ' || p_tablespace;
        end if;
        if p_update_indexes then
            l_ddl := l_ddl || ' UPDATE INDEXES';
        end if;
        if p_move_online then
            l_ddl := l_ddl || ' ONLINE';
        end if;
    
        run_ddl(l_ddl, p_script, p_execute);
    
    end move_table;

    procedure move_tables
    (    
        p_move_online in boolean default false,
        p_script in boolean default true,
        p_execute in boolean default false,
        p_tablespace in varchar2 default null
    )
    is
        cursor c_tables is
            select table_name
            from user_tables
            where partitioned = 'NO'
            and (tablespace_name <> p_tablespace or p_tablespace is null);
    begin
    
        for r_table in c_tables loop
            move_table(
                p_table => r_table.table_name,
                p_update_indexes => false,
                p_move_online => false,
                p_script => p_script,
                p_execute => p_execute,
                p_tablespace => p_tablespace
            );
          
        end loop;
    
    end move_tables;

    procedure move_index
    (
        p_index in varchar2, 
        p_script in boolean default true, 
        p_execute in boolean default false, 
        p_tablespace in varchar2 default null
    )
    is
        l_ddl varchar2(100);
    begin
        --move non partitioned index
        --alter index "SH"."TIMES_PK" rebuild tablespace sales_history_index
        l_ddl := 'ALTER INDEX ' || p_index || ' REBUILD';
        if p_tablespace is not null then
            l_ddl := l_ddl || ' TABLESPACE ' || p_tablespace;
        end if;
    
        run_ddl(l_ddl, p_script, p_execute);
    
    end move_index;

    procedure move_indexes
    (
        p_script in boolean default true, 
        p_execute in boolean default false, 
        p_tablespace in varchar2 default null
    )
    is
        cursor c_indexes is
            select index_name
            from user_indexes
            where 
            partitioned = 'NO'
            and index_type <> 'LOB'
            and (tablespace_name <> p_tablespace or p_tablespace is null)
            order by table_name, index_name;
    begin
    
        for r_index in c_indexes loop
            move_index(
                p_index => r_index.index_name,
                p_script => p_script,
                p_execute => p_execute,
                p_tablespace => p_tablespace
            );
          
        end loop;
    
    end move_indexes;

    procedure move_table_partition_single
    (
        p_table in varchar2, 
        p_partition_name in varchar2,
        p_tablespace in varchar2 default null,  
        p_logging in boolean default true,
        p_script in boolean default true, 
        p_execute in boolean default false 
    )
    is
        l_ddl varchar2(1000);
    begin
        --move the partition to the new tablespace if specified
        --move partition segments if tablespace is not specified
        --ALTER TABLE table_name MOVE PARTITION partition_name TABLESPACE tablespace_name NOLOGGING;
    
        l_ddl :=  'ALTER TABLE ' || p_table || ' MOVE PARTITION ' || p_partition_name;
        if p_tablespace is not null then
            l_ddl := l_ddl || ' TABLESPACE ' || p_tablespace;
        end if;
        if not p_logging then
            l_ddl := l_ddl || ' NOLOGGING';  
        end if;
        run_ddl(l_ddl, p_script, p_execute);
    
    end move_table_partition_single;

    procedure move_table_partitions
    (
        p_table in varchar2, 
        p_tablespace in varchar2 default null,   
        p_logging in boolean default true,
        p_script in boolean default true, 
        p_execute in boolean default false 
    )
    is    
        cursor c_partitions is
            select 
                table_name, 
                partition_name, 
                tablespace_name
            from user_tab_partitions 
            where 
                table_name = p_table
                and (tablespace_name <> p_tablespace or p_tablespace is null)
            order by partition_name;
    begin
        --move the partitions to the new tablespace
        --ALTER TABLE costs MOVE PARTITION COSTS_1997 TABLESPACE sales_history_data NOLOGGING;
        for r in c_partitions loop
            --show the current partition information for the table
            --dbms_output.put_line(p_table || ' partition=' || p_partition_name || ' tablespace=' || r.tablespace_name);
            move_table_partition_single(p_table, r.partition_name, p_tablespace, p_logging, p_script, p_execute);
        end loop;
    
    end move_table_partitions;

    procedure move_index_partition_single
    (
        p_index in varchar2, 
        p_partition_name in varchar2,
        p_script in boolean default true, 
        p_execute in boolean default false, 
        p_tablespace in varchar2 default null
    )
    is
        l_ddl varchar2(1000);
    begin
        --move the index partition to the new tablespace if specified
        --rebuild the index segments if no tablespace is specified
        --ALTER INDEX index_name REBUILD PARTITION index_partition_name TABLESPACE tablespace_name
    
        l_ddl :=  'ALTER INDEX ' || p_index || ' REBUILD PARTITION ' || p_partition_name;
        if p_tablespace is not null then
            l_ddl := l_ddl || ' TABLESPACE ' || p_tablespace;
        end if;    
        run_ddl(l_ddl, p_script, p_execute);
    
    end move_index_partition_single;

    procedure move_index_partitions
    (
        p_index in varchar2, 
        p_script in boolean default true, 
        p_execute in boolean default false, 
        p_tablespace in varchar2 default null
    )
    is
        cursor c_partitions is
            select 
                partition_name, 
                status, 
                tablespace_name 
            from user_ind_partitions
            where 
                index_name = p_index
                and (tablespace_name <> p_tablespace or p_tablespace is null)
            order by partition_name;
    begin
    
        for r in c_partitions loop
            --show the current partition information for the index
            --dbms_output.put_line(p_index || ' partition=' || r.partition_name || ' tablespace=' || r.tablespace_name || ' STATUS= ' || r.status);
            move_index_partition_single(p_index, r.partition_name, p_script, p_execute, p_tablespace);
        end loop;
    
    end move_index_partitions;

    procedure move_index_partitions_table
    (
        p_table in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false,
        p_tablespace in varchar2 default null    
    )
    is
        cursor c_indexes is
        select index_name 
        from user_indexes
        where 
            partitioned = 'YES'
            and table_name = p_table
        order by index_name;
    begin
    
        for r in c_indexes loop
            move_index_partitions(r.index_name, p_script, p_execute,p_tablespace);
        end loop;
    
    end move_index_partitions_table;
    
    procedure rebuild_index_partitions
    (
        p_index in varchar2, 
        p_unusable_only in boolean default true,
        p_script in boolean default true, 
        p_execute in boolean default false
    )
    is
        cursor c_partitions is
            select 
                partition_name, 
                status, 
                tablespace_name 
            from user_ind_partitions
            where index_name = p_index
            order by partition_name;
    begin
        --rebuild the index partitions in their current tablespaces
        --ALTER INDEX COSTS_PROD_BIX REBUILD PARTITION COSTS_Q4_2003
    
        for r in c_partitions loop
            if (not p_unusable_only) or (p_unusable_only and r.status <> 'USABLE') then 
                move_index_partition_single(p_index, r.partition_name, p_script, p_execute);
            end if;
        end loop;
    
    end rebuild_index_partitions;

    procedure rebuild_index_partitions_table
    (
        p_table in varchar2,
        p_unusable_only in boolean default true,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        cursor c_indexes is
            select index_name 
            from user_indexes
            where 
                partitioned = 'YES'
                and table_name = p_table
            order by index_name;
    begin
    
        for r in c_indexes loop
            rebuild_index_partitions(r.index_name, p_unusable_only, p_script, p_execute);
        end loop;
    
    end rebuild_index_partitions_table;

    procedure rename_table_partition
     (
        p_table in varchar2, 
        p_partition_name in varchar2, 
        p_new_partition_name in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false
     )
     is
        l_ddl varchar2(128);
     begin
        --rename table partitions as needed
        --ALTER TABLE costs RENAME PARTITION COSTS_H2_1997 TO COSTS_1997;
        l_ddl := 'ALTER TABLE ' || p_table || ' RENAME PARTITION ' || p_partition_name || ' TO ' || p_new_partition_name;
    
        run_ddl(l_ddl, p_script, p_execute);
    
    end rename_table_partition;

    procedure rename_index_partition
    (
        p_index in varchar2, 
        p_partition_name in varchar2, 
        p_new_partition_name in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_ddl varchar2(128);
    begin
        --rename index partitions
        -- ALTER INDEX COSTS_TIME_BIX RENAME PARTITION COSTS_Q4_2003 TO COSTS_2003;
        l_ddl := 'ALTER INDEX ' || p_index || ' RENAME PARTITION ' || p_partition_name || ' TO ' || p_new_partition_name;
    
        run_ddl(l_ddl, p_script, p_execute);
    
    end rename_index_partition;

    procedure merge_range_partitions
    (
        p_table in varchar2,
        p_source_partitions in varchar2,
        p_target_partition in varchar2,
        p_update_indexes in boolean default true,
        p_online in boolean default true,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_ddl varchar2(4000);
    begin
        --merge quarterly partitions into yearly partitions
        --local index partitions get merged with update indexes clause
        --ALTER TABLE costs 
        --  MERGE PARTITIONS COSTS_Q1_2003, COSTS_Q2_2003,COSTS_Q3_2003,COSTS_Q4_2003 INTO PARTITION COSTS_Q4_2003
        --  UPDATE INDEXES 
        --  ONLINE;
        l_ddl := 'ALTER TABLE ' || p_table;
        l_ddl := l_ddl || ' MERGE PARTITIONS ' || p_source_partitions || ' INTO PARTITION ' || p_target_partition;
        if p_update_indexes then
            l_ddl := l_ddl || ' UPDATE INDEXES';
        end if;
        if p_online then
            l_ddl := l_ddl || ' ONLINE';
        end if;
    
        run_ddl(l_ddl, p_script, p_execute);
    
    end merge_range_partitions;

    procedure add_range_partition
    (
        p_table in varchar2,
        p_partition_name in varchar2,
        p_range_expression in varchar2,
        p_tablespace in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_ddl varchar2(4000);
    begin
        --adding a new range partition
    /*
      ALTER TABLE costs
          ADD PARTITION costs_2023 VALUES LESS THAN (TO_DATE(' 2024-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS')) segment creation deferred
          PCTFREE 5 PCTUSED 40 INITRANS 1 MAXTRANS 255 
          NOCOMPRESS NOLOGGING 
          TABLESPACE sales_history_data;
    */
        l_ddl := 'ALTER TABLE ' || p_table;
        l_ddl := l_ddl || ' ADD PARTITION ' || p_partition_name;
        l_ddl := l_ddl || ' VALUES LESS THAN (' || p_range_expression || ') SEGMENT CREATION DEFERRED';
        l_ddl := l_ddl || ' PCTFREE 0 PCTUSED 40 INITRANS 1 MAXTRANS 255';
        l_ddl := l_ddl || ' COMPRESS BASIC NOLOGGING';
        l_ddl := l_ddl || ' TABLESPACE ' || p_tablespace;
    
        run_ddl(l_ddl, p_script, p_execute);
    
    end add_range_partition;
    
    procedure add_range_partition_year
    (
        p_table in varchar2,
        p_year in number,
        p_tablespace in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_range_expression varchar2(1000);
        l_partition_name varchar2(128);
    begin
        --adding a new range partition
    /*
      ALTER TABLE costs
          ADD PARTITION costs_2023 VALUES LESS THAN (TO_DATE(' 2024-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS')) segment creation deferred
          PCTFREE 5 PCTUSED 40 INITRANS 1 MAXTRANS 255 
          NOCOMPRESS NOLOGGING 
          TABLESPACE sales_history_data;
    */
    
        l_partition_name := p_table || '_' || p_year;
        l_range_expression := 'TO_DATE('' ' || to_char(p_year + 1) || '''-01-01 00:00:00'',''SYYYY-MM-DD HH24:MI:SS'')';
    
        add_range_partition(p_table, l_partition_name, l_range_expression, p_tablespace, p_script, p_execute);
    
    end add_range_partition_year;

    procedure add_range_partition_quarters
    (
        p_table in varchar2,
        p_year in number,
        p_tablespace in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false
    )
    is
        l_range_expression varchar2(1000);
        l_table_year varchar2(128);
        l_partition varchar2(128);
    begin
        --adding a new range partition for each quarter in the year
    /*
      ALTER TABLE costs
          ADD PARTITION costs_2023 VALUES LESS THAN (TO_DATE(' 2024-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS')) segment creation deferred
          PCTFREE 5 PCTUSED 40 INITRANS 1 MAXTRANS 255 
          NOCOMPRESS NOLOGGING 
          TABLESPACE sales_history_data;
    */
        l_table_year := p_table || '_' || p_year;
        l_partition := l_table_year || '_Q1';
        l_range_expression := 'TO_DATE('' ' || to_char(p_year) || '-04-01 00:00:00'',''SYYYY-MM-DD HH24:MI:SS'')';
        add_range_partition(p_table, l_partition, l_range_expression, p_tablespace, p_script, p_execute);
    
        l_partition := l_table_year || '_Q2';
        l_range_expression := 'TO_DATE('' ' || to_char(p_year) || '-07-01 00:00:00'',''SYYYY-MM-DD HH24:MI:SS'')';
        add_range_partition(p_table, l_partition, l_range_expression, p_tablespace, p_script, p_execute);
    
        l_partition := l_table_year || '_Q3';
        l_range_expression := 'TO_DATE('' ' || to_char(p_year) || '-10-01 00:00:00'',''SYYYY-MM-DD HH24:MI:SS'')';
        add_range_partition(p_table, l_partition, l_range_expression, p_tablespace, p_script, p_execute);
    
        l_partition := l_table_year || '_Q4';
        l_range_expression := 'TO_DATE('' ' || to_char(p_year + 1) || '-01-01 00:00:00'',''SYYYY-MM-DD HH24:MI:SS'')';
        add_range_partition(p_table, l_partition, l_range_expression, p_tablespace, p_script, p_execute);
    
    end add_range_partition_quarters;

    procedure create_directory
    (
        p_ora_dir in varchar2, 
        p_path in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false   
    )
    is
        l_ddl varchar2(1000);
    begin
        l_ddl := 'CREATE OR REPLACE DIRECTORY ' || p_ora_dir || ' AS ''' || p_path || '''';
        run_ddl(l_ddl, p_script, p_execute);
    end create_directory;
  
    procedure drop_directory
    (
        p_ora_dir in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false      
    )
    is
        l_ddl varchar2(500);
    begin
        l_ddl := 'drop directory ' || p_ora_dir;
        run_ddl(l_ddl, p_script, p_execute);
    end drop_directory;
  
    procedure revoke_directory_access
    (
        p_user in varchar2, 
        p_ora_dir in varchar2,
        p_script in boolean default true,
        p_execute in boolean default false      
    )
    is
        l_ddl varchar2(1000);
    begin
        l_ddl := 'REVOKE ALL ON DIRECTORY ' || p_ora_dir || ' FROM ' || p_user;
        run_ddl(l_ddl, p_script, p_execute);
    end revoke_directory_access;
  
    procedure grant_directory_access
    (
        p_user in varchar2, 
        p_ora_dir in varchar2, 
        p_write in boolean default false,
        p_script in boolean default true,
        p_execute in boolean default false      
    )
    is
        l_ddl varchar2(1000);
    begin
        l_ddl := 'GRANT READ';
        if p_write then
            l_ddl := l_ddl || ', WRITE';
        end if;
        l_ddl := l_ddl || ' ON DIRECTORY ' || p_ora_dir || ' TO ' || p_user;
        run_ddl(l_ddl, p_script, p_execute);
    end grant_directory_access;

--package initialization
begin
  null;
end admin$schema;