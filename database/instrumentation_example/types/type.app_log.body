create or replace type body app#log is

    constructor function app#log
    (
        p_object_name in varchar2
    ) return self as result 
    is
    begin
        self.object_name       := p_object_name;
        self.method_name       := null;
        self.enable_exceptions := 0;
        self.enable_traces     := 0;
        self.enable_audits     := 0;
        self.enable_timers     := 0;
        self.start_time        := null;
        self.stop_time         := null;
        return;
    end app#log;

    member procedure set_env
    (
        p_enable_exceptions in boolean default true,
        p_enable_traces     in boolean default true,
        p_enable_audits     in boolean default true,
        p_enable_timers     in boolean default true
    ) 
    is
    begin
        app#log_util.set_package_environment(
            p_package => self.object_name, 
            p_enable_errors => p_enable_exceptions, 
            p_enable_traces => p_enable_traces, 
            p_enable_audits => p_enable_audits, 
            p_enable_timers => p_enable_timers);
    end set_env;

    member procedure get_env
    (
        p_enable_exceptions out boolean,
        p_enable_traces     out boolean,
        p_enable_audits     out boolean,
        p_enable_timers     out boolean
    ) 
    is
    begin
        app#log_util.get_package_environment(
            p_package => self.object_name,
            p_enable_errors => p_enable_exceptions,
            p_enable_traces => p_enable_traces,
            p_enable_audits => p_enable_audits,
            p_enable_timers => p_enable_timers);
    end get_env;
  
    member procedure get_state
    (
        p_enable_exceptions out boolean,
        p_enable_traces     out boolean,
        p_enable_audits     out boolean,
        p_enable_timers     out boolean
    ) 
    is
    begin
        --return the current state of the logging object
        p_enable_exceptions := app#bool.flag_to_switch(self.enable_exceptions);
        p_enable_traces := app#bool.flag_to_switch(self.enable_traces);
        p_enable_audits := app#bool.flag_to_switch(self.enable_audits);
        p_enable_timers := app#bool.flag_to_switch(self.enable_timers);
    end get_state;

    member procedure print_settings
    (
        p_show_environment in boolean default false
    )  
    is
        l_errors boolean := true;
        l_traces boolean := true;
        l_audits boolean := true;
        l_timing boolean := true;
  
        procedure print_enabled(p_type in varchar2, p_enabled in boolean)
        is
            l_state varchar2(4000):= ' is disabled (will not write to logs)';
        begin
            if p_enabled then 
                l_state := ' is enabled (will write to logs)';
            end if;
            dbms_output.put_line(p_type || l_state);
        end print_enabled;
    begin
        --show the current state of the logging object
        self.get_state(l_errors, l_traces, l_audits, l_timing);
        dbms_output.put_line('Current settings for ' || self.object_name || ' are:');
        print_enabled('ERRORS' , l_errors);
        print_enabled('TRACES' , l_traces);
        print_enabled('AUDITS' , l_audits);
        print_enabled('TIMING' , l_timing);

        --show the settings in the environment table for this object
        if p_show_environment then
            self.get_env(l_errors, l_traces, l_audits, l_timing);
            dbms_output.put_line('Environment table settings for ' || self.object_name || ' are:');
            print_enabled('ERRORS' , l_errors);
            print_enabled('TRACES' , l_traces);
            print_enabled('AUDITS' , l_audits);
            print_enabled('TIMING' , l_timing);
        end if;
    end print_settings;
  
    --toggle methods are for local package testing
    --these methods only change object state
    --state is not persisted to environment table
    member procedure toggle_trace
    (
        p_enabled in boolean default true
    )
    is
    begin
        self.enable_traces := app#bool.switch_to_flag(p_enabled);
    end toggle_trace;

    member procedure toggle_exceptions
    (
        p_enabled in boolean default true
    )
    is
    begin
        self.enable_exceptions := app#bool.switch_to_flag(p_enabled);
    end toggle_exceptions;
  
    member procedure toggle_audits
    (
        p_enabled in boolean default true
    )
    is
    begin
        self.enable_audits := app#bool.switch_to_flag(p_enabled);
    end toggle_audits;
  
    member procedure toggle_timing
    (
        p_enabled in boolean default true
    )
    is
    begin  
        self.enable_timers := app#bool.switch_to_flag(p_enabled);
    end toggle_timing;
  
    member procedure init 
    is
        l_errors boolean := false;
        l_traces boolean := false;
        l_audits boolean := false;
        l_timers boolean := false;
    begin
        self.method_name := 'APP#LOG.INIT';
        get_env(l_errors, l_traces, l_audits, l_timers);   
        self.enable_exceptions := app#bool.switch_to_flag(l_errors);
        self.enable_traces     := app#bool.switch_to_flag(l_traces);
        self.enable_audits     := app#bool.switch_to_flag(l_audits);
        self.enable_timers     := app#bool.switch_to_flag(l_timers);
        self.timing_init;
    end init;

    member procedure set_object_method
    (
        p_method in varchar2 default '#USE_CURRENT'
    ) 
    is
    begin
        if nvl(p_method, '#USE_CURRENT') <> '#USE_CURRENT' then
            self.method_name := p_method;
        end if;
    end set_object_method;

    member function get_object_reference 
    return varchar2 
    is
    begin
        return self.object_name || '.' || self.method_name;
    end get_object_reference;

    member procedure trace
    (
        p_message in varchar2,
        p_method  in varchar2 default '#USE_CURRENT'
    ) 
    is
    begin
        if self.enable_traces = 1 then
            set_object_method(p_method);
            app#log_util.write_trace(self.object_name, self.method_name, p_message);
        end if;
    end trace;

    member procedure err
    (
        p_message in varchar2,
        p_method  in varchar2 default '#USE_CURRENT'
    ) 
    is
    begin
        if self.enable_exceptions = 1 then
            set_object_method(p_method);
            app#log_util.write_exception(self.object_name, self.method_name, p_message);
        end if;
    end err;

    member procedure audits
    (
        p_message in varchar2,
        p_method  in varchar2 default '#USE_CURRENT'
    ) 
    is
    begin
        if self.enable_audits = 1 then
            set_object_method(p_method);
            app#log_util.write_audit(self.object_name, self.method_name, p_message);
        end if;
    end audits;

    member procedure timing_init 
    is
    begin
        self.start_time := null;
        self.stop_time  := null;
    end timing_init;

    member procedure timing_start 
    is
    begin
        --reset the timer attributes
        self.timing_init;
        --localtimestamp returns a timestamp value using the session local time zone
        --no need to use systimestamp or current_timestamp with timezone information
        self.start_time := localtimestamp;
    end timing_start;

    member procedure timing_stop 
    is
    begin
        self.stop_time := localtimestamp;
    end timing_stop;

    member procedure timing
    (
        p_message in varchar2,
        p_method  in varchar2 default '#USE_CURRENT'
    ) 
    is
    begin
        if self.enable_timers = 1 then
            set_object_method(p_method);
            app#log_util.write_timing(self.object_name, self.method_name, self.start_time, self.stop_time, p_message);
            self.timing_init;
        end if;
    end timing;

end;