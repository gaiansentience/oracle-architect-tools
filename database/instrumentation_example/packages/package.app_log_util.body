create or replace package body app#log_util is

    c_max_table_varchar constant integer := 4000;
    c_max_object_name   constant integer := 128;

    --constants for environment variables
    c_env_enable_pkg    constant app#env_util.environment_key := 'ENABLE_PACKAGE_LOGS_FOR';
    c_env_enable_global constant app#env_util.environment_key := 'ENABLE_GLOBAL_LOGS_FOR';
    
    --constants for log entry types
    c_error constant app#env_util.environment_key := 'EXCEPTION';
    c_trace constant app#env_util.environment_key := 'TRACE';
    c_audit constant app#env_util.environment_key := 'AUDIT';
    c_timer constant app#env_util.environment_key := 'TIMER';
    
    c_unspecified constant app#env_util.environment_key := 'UNSPECIFIED';
    c_underscore  constant app#env_util.environment_key := '_';
    
    --variables to control ALL log activity
    g_enable_exceptions boolean := true;
    g_enable_traces     boolean := false;
    g_enable_audits     boolean := true;
    g_enable_timers     boolean := true;

    --private procedure to set environment switch value
    procedure set_env_switch
    (
        p_env_variable in app#env_util.environment_key,
        p_enabled      in boolean
    ) 
    is
        l_description app#env_util.environment_description;
    begin
        l_description := initcap(replace(p_env_variable, c_underscore, ' '));
        app#env_util.set_switch(p_env_variable, p_enabled, l_description);
    end set_env_switch;

    --localized for demonstration, should move to app#fmt_util package or type
    procedure append
    (
        p_target in out varchar2,
        p_value  in varchar2,
        p_prefix in varchar2 default null,
        p_suffix in varchar2 default null
    ) 
    is
    begin
        if p_prefix is not null then
            p_target := p_target || p_prefix;
        end if;
        p_target := p_target || p_value;
        if p_suffix is not null then
            p_target := p_target || p_suffix;
        end if;
    end append;

    --build a logging environment variable name
    function fmt_env_var
    (
        p_variable_base in app#env_util.environment_key,
        p_log_type      in app#env_util.environment_key,
        p_package       in app#env_util.environment_key default null
    ) return app#env_util.environment_key 
    is
        l_variable app#env_util.environment_key;
    begin
        append(l_variable, p_variable_base);
        if p_package is not null then
            append(l_variable, p_package, c_underscore);
        end if;
        append(l_variable, p_log_type, c_underscore);
        return upper(l_variable);
    end fmt_env_var;

    --expose set/get methods for controlling ALL writes to the log table
    procedure set_global_environment
    (
        p_enable_errors in boolean default true,
        p_enable_traces in boolean default false,
        p_enable_audits in boolean default true,
        p_enable_timers in boolean default true
    ) 
    is
    begin
        set_env_switch(fmt_env_var(c_env_enable_global, c_error), p_enable_errors);
        set_env_switch(fmt_env_var(c_env_enable_global, c_trace), p_enable_traces);
        set_env_switch(fmt_env_var(c_env_enable_global, c_audit), p_enable_audits);
        set_env_switch(fmt_env_var(c_env_enable_global, c_timer), p_enable_timers);
    end set_global_environment;

    procedure get_global_environment
    (
        p_enable_errors out boolean,
        p_enable_traces out boolean,
        p_enable_audits out boolean,
        p_enable_timers out boolean
    ) 
    is
    begin
        p_enable_errors := app#env_util.get_switch(fmt_env_var(c_env_enable_global, c_error));
        p_enable_traces := app#env_util.get_switch(fmt_env_var(c_env_enable_global, c_trace));
        p_enable_audits := app#env_util.get_switch(fmt_env_var(c_env_enable_global, c_audit));
        p_enable_timers := app#env_util.get_switch(fmt_env_var(c_env_enable_global, c_timer));
    end get_global_environment;

    procedure initialize is
    begin
        --set global logging state
        get_global_environment(g_enable_exceptions, g_enable_traces, g_enable_audits, g_enable_timers);
    end initialize;

    function fmt_pkg_env_var
    (
        p_package  in app#env_util.environment_key,
        p_log_type in app#env_util.environment_key
    ) return app#env_util.environment_key 
    is
    begin
        return fmt_env_var(c_env_enable_pkg, p_log_type, p_package);
    end fmt_pkg_env_var;

    --expose set/get methods for controlling specific package instrumentation
    procedure set_package_environment
    (
        p_package       in app#env_util.environment_key,
        p_enable_errors in boolean default true,
        p_enable_traces in boolean default false,
        p_enable_audits in boolean default true,
        p_enable_timers in boolean default true
    ) 
    is
    begin
        set_env_switch(fmt_pkg_env_var(p_package, c_error), p_enable_errors);
        set_env_switch(fmt_pkg_env_var(p_package, c_trace), p_enable_traces);
        set_env_switch(fmt_pkg_env_var(p_package, c_audit), p_enable_audits);
        set_env_switch(fmt_pkg_env_var(p_package, c_timer), p_enable_timers);
    end set_package_environment;

    procedure get_package_environment
    (
        p_package       in app#env_util.environment_key,
        p_enable_errors out boolean,
        p_enable_traces out boolean,
        p_enable_audits out boolean,
        p_enable_timers out boolean
    ) 
    is
    begin
        p_enable_errors := app#env_util.get_switch(fmt_pkg_env_var(p_package, c_error));
        p_enable_traces := app#env_util.get_switch(fmt_pkg_env_var(p_package, c_trace));
        p_enable_audits := app#env_util.get_switch(fmt_pkg_env_var(p_package, c_audit));
        p_enable_timers := app#env_util.get_switch(fmt_pkg_env_var(p_package, c_timer));
    end get_package_environment;

    --enable instrumentation for all packages
    procedure set_all_package_environments
    (
        p_enable_errors in boolean default true,
        p_enable_traces in boolean default false,
        p_enable_audits in boolean default true,
        p_enable_timers in boolean default true
    ) 
    is
        cursor c is
        select object_name
        from user_objects
        where object_type = 'PACKAGE';
    begin
        for r in c loop
            set_package_environment(r.object_name, p_enable_errors, p_enable_traces, p_enable_audits, p_enable_timers);
        end loop;
    end set_all_package_environments;

    procedure remove_all_package_environments
    is
    begin
        delete from app#environment e
        where e.setting like 'ENABLE_PACKAGE_LOGS_FOR%';
        commit;
    end remove_all_package_environments;


    procedure write_entry(r_entry in app#logs%rowtype) 
    is
        pragma autonomous_transaction;
    begin
        insert into app#logs values r_entry;
        commit;
    exception
        when others then
            rollback;
            --DO NOT RAISE EXCEPTIONS FROM THE ERROR LOGGING MECHANISM
    end write_entry;

    procedure set_values
    (
        r_entry    in out app#logs%rowtype,
        p_log_type in app#env_util.environment_key,
        p_object   in app#env_util.environment_key,
        p_method   in app#env_util.environment_key,
        p_message  in varchar2,
        p_ref_id   in app#env_util.reference_id
    ) 
    is
        function cut
        (
            p_val    in varchar2,
            p_maxlen in number
        ) return varchar2 
        is
        begin
            return substr(p_val, 1, p_maxlen);
        end cut;
    begin
        r_entry.log_type := p_log_type;
        if r_entry.log_type = c_audit then
            r_entry.preserve_on_purge := 1;
        else
            r_entry.preserve_on_purge := 0;
        end if;
        r_entry.object_name   := nvl(cut(p_object, c_max_object_name), c_unspecified);
        r_entry.object_method := nvl(cut(p_method, c_max_object_name), c_unspecified);
        r_entry.reference_id  := nvl(p_ref_id, c_reference_id_unknown);
        r_entry.message       := cut(p_message, c_max_table_varchar);
        r_entry.created_by    := app#env_util.app_user;
        r_entry.os_user_name  := app#env_util.app_user;
        r_entry.db_user_name  := app#env_util.db_user;
        r_entry.db_session_id := app#env_util.db_sid;
        r_entry.created_date  := sysdate;
    end set_values;

    --write an exception entry to the logs
    procedure write_exception
    (
        p_object  in app#env_util.environment_key,
        p_method  in app#env_util.environment_key,
        p_message in varchar2,
        p_ref_id  in app#env_util.reference_id default c_reference_id_unknown
    ) 
    is
        r_entry app#logs%rowtype;
    begin
        set_values(r_entry, c_error, p_object, p_method, p_message, p_ref_id);
        write_entry(r_entry);
    end write_exception;

    --write a trace entry to the logs
    procedure write_trace
    (
        p_object  in app#env_util.environment_key,
        p_method  in app#env_util.environment_key,
        p_message in varchar2,
        p_ref_id  in app#env_util.reference_id default c_reference_id_unknown
    ) 
    is
        r_entry app#logs%rowtype;
    begin
        set_values(r_entry, c_trace, p_object, p_method, p_message,p_ref_id);
        write_entry(r_entry);
    end write_trace;

    --write an audit entry to the logs
    --(set the preserve on purge flag for all audits)
    procedure write_audit
    (
        p_object  in app#env_util.environment_key,
        p_method  in app#env_util.environment_key,
        p_message in varchar2,
        p_ref_id  in app#env_util.reference_id default c_reference_id_unknown
    ) 
    is
        r_entry app#logs%rowtype;
    begin
        set_values(r_entry, c_audit, p_object, p_method, p_message, p_ref_id);
        write_entry(r_entry);
    end write_audit;
  
    function get_seconds
    (
        p_start_time in timestamp,
        p_stop_time in timestamp
    ) return number
    is
        l_difference dsinterval_unconstrained;
        l_hours number;
        l_minutes number;
        l_seconds number;
    begin
  
        if p_start_time is null or p_stop_time is null then
            l_seconds := null;
        else
            l_difference := p_stop_time - p_start_time;
            l_hours := extract(hour from l_difference);
            l_minutes := extract(minute from l_difference);
            l_seconds := extract(second from l_difference);
            l_minutes := l_hours * 60 + l_minutes;
            l_seconds := l_minutes * 60 + l_seconds;
        end if;
        
        return l_seconds;
  
    end get_seconds;

    --write a timing entry to the logs
    procedure write_timing
    (
        p_object  in app#env_util.environment_key,
        p_method  in app#env_util.environment_key,
        p_start   in timestamp,
        p_stop    in timestamp,
        p_message in varchar2 default null,
        p_ref_id  in app#env_util.reference_id default c_reference_id_unknown
    ) 
    is
        r_entry app#logs%rowtype;
        l_seconds number;
        l_timing varchar2(4000);
    begin
  
        l_seconds := get_seconds(p_start, p_stop);
        if l_seconds is not null then
            l_timing := 'TIMING = ' || l_seconds || ' seconds.';
        else
            l_timing := 'TIMING COULD NOT BE DETERMINED.';
            if p_start is null then
                l_timing := l_timing || '  TIMER NOT STARTED.';
            end if;
            if p_stop is null then
                l_timing := l_timing || '  TIMER NOT STOPPED.';
            end if;
        end if;
        l_timing := l_timing || '  ' || p_message;

        set_values(r_entry, c_timer, p_object, p_method, l_timing, p_ref_id);
        write_entry(r_entry);
    end write_timing;

    --expose simple purge functionality
    procedure purge_logs 
    (
        p_days_to_keep in number default 7
    )
    is
    begin
  
        if p_days_to_keep <= 7 then
            raise_application_error(-20100, 'Cannot delete logs less than 7 days old.');
        end if;

        delete from app#logs l
        where  l.preserve_on_purge <> 1
        and l.created_date < sysdate - p_days_to_keep;

        commit;

    exception
        when others then
            raise;
    end purge_logs;

begin
    initialize;
end app#log_util;