create or replace type body app#html is
    
    constructor function app#html 
    return self as result 
    is
    begin
        self.initialize;
        return;
    end app#html;
    
    --member methods
    --these write to self.data
    
    --html comment <--VALUE-->
    member procedure comment_html
    (
        p_value      in varchar2
    ) 
    is
    begin    
        self.append_markup(app#html.comment_html_(p_value));
    end comment_html;
    
    --line break <br/>
    member procedure break
    (
        p_lines      in number default 1
    ) 
    is
    begin    
        for i in 1 .. p_lines loop
            self.empty(p_tag => 'br');
        end loop;
    end break;
    
    --hard return <hr/>
    member procedure hr
    is
    begin
        self.empty(p_tag => 'hr');
    end hr;
    
    --html doc <html></html>
    member procedure html
    (
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'html', p_open => p_open);
    end html;
    
    --html head <head></head>
    member procedure head
    (
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'head', p_open => p_open);
    end head;
    
    --html body <body></body>
    member procedure body
    (
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'body', p_open => p_open);
    end body;
    
    --image  <img src="p_src" width="p_width" height="p_height"/>
    member procedure img
    (
        p_src        in varchar2,
        p_width      in number default 0,
        p_height     in number default 0
    ) 
    is
        l_attribs app#attribs_set := new app#attribs_set();
    begin
        l_attribs.add_attribute('src', p_src);
        l_attribs.add_attribute('width', p_width);
        l_attribs.add_attribute('height', p_height);
        self.empty(p_tag => 'img', p_attributes => l_attribs.attributes_formatted);
    end img;
    
    --bold <b></b>
    member procedure bold
    (
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'b',p_open => p_open);
    end bold;
    
    --font <font></font>
    member procedure font
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'font', p_attributes => p_attributes, p_open => p_open);
    end font;
    
    --division <div></div>
    member procedure div
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'div', p_attributes => p_attributes, p_open => p_open);
    end div;
    
    --table <table></table>
    member procedure table_html
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'table', p_attributes => p_attributes, p_open => p_open);            
    end table_html;
    
    --table row <tr></tr>
    member procedure tr
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'tr', p_attributes => p_attributes, p_open => p_open);
    end tr;
    
    --table header <th></th>
    member procedure th
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'th',p_attributes => p_attributes, p_open => p_open);              
    end th;
    
    --table heading <th>VALUE</th>
    member procedure table_heading
    (
        p_value      in varchar2,
        p_attributes in varchar2 default null
    ) 
    is
    begin
        self.th(p_attributes => p_attributes, p_open => true);
        self.append_value(p_value);    
        self.th(p_open => false);
    end table_heading;
    
    --table data <td></td>
    member procedure td
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'td', p_attributes => p_attributes, p_open => p_open);
    end td;
    
    --table data <td>VALUE</td>
    member procedure table_data
    (
        p_value      in varchar2,
        p_attributes in varchar2 default null
    ) 
    is
    begin
        self.td(p_attributes => p_attributes, p_open => true);
        self.append_value(p_value);    
        self.td(p_open => false);
    end table_data;
    
    --ordered list <ol></ol>
    member procedure ol
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'ol', p_attributes => p_attributes, p_open => p_open);
    end ol;
    
    --unordered list <ul></ul>
    member procedure ul
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'ul', p_attributes => p_attributes, p_open => p_open);
    end ul;
    
    --list item <lt></li>
    member procedure li
    (
        p_attributes in varchar2 default null,
        p_open    in boolean default true
    ) 
    is
    begin
        self.simple(p_tag => 'li', p_attributes => p_attributes, p_open => p_open);
    end li;
    
    --list item <lt>VALUE</li>
    member procedure list_item
    (
        p_value      in varchar2,
        p_attributes in varchar2 default null
    ) 
    is
    begin
        self.li(p_attributes => p_attributes, p_open => true);
        self.append_value(p_value);
        self.li(p_open => false);
    end list_item;
    
    --static methods returning varchar
    
    --html comment <--VALUE-->
    static function comment_html_
    (
        p_value      in varchar2
    ) return varchar2 
    is
    begin
        return app#fmt.lt || app#fmt.exclaim || app#fmt.dash(2) || p_value || app#fmt.dash(2) || app#fmt.gt;
    end comment_html_;
    
    --line break <br/>
    static function break_
    (
        p_lines      in number default 1
    ) return varchar2 
    is
        e varchar2(1000);
    begin
        for i in 1 .. p_lines loop
            e := e || app#ml.empty_('br');
        end loop;
        return e;
    end break_;
    
    --hard return <hr/>
    static function hr_ 
    return varchar2 
    is
    begin
        return app#ml.empty_('hr');
    end hr_;
    
    --html doc <html></html>
    static function html_
    (
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_(p_tag => 'html', p_open => p_open);
    end html_;
    
    --html head <head></head>
    static function head_
    (
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_(p_tag => 'head', p_open => p_open);
    end head_;
    
    --html body <body></body>
    static function body_
    (
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_(p_tag => 'body', p_open => p_open);
    end body_;
    
    --image  <img src="p_src" width="p_width" height="p_height"/>
    static function img_
    (
        p_src        in varchar2,
        p_width      in number default 0,
        p_height     in number default 0
    ) return varchar2 
    is
        a_set app#attribs_set := new app#attribs_set;
    begin
        a_set.add_attribute('src', p_src);
        a_set.add_attribute('width', p_width);
        a_set.add_attribute('height', p_height);
        return app#ml.empty_(p_tag => 'img', p_attributes => a_set.attributes_formatted);
    end img_;
    
    --bold <b></b>
    static function bold_
    (
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_(p_tag => 'b', p_open => p_open);
    end bold_;
    
    --font <font></font>
    static function font_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('font', p_attributes, p_open);
    end font_;
    
    --division <div></div>
    static function div_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('div', p_attributes, p_open);
    end div_;
    
    --table <table></table>
    static function table_html_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('table', p_attributes, p_open);
    end table_html_;
    
    --table row <tr></tr>
    static function tr_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('tr', p_attributes, p_open);
    end tr_;
    
    --table header <th></th>
    static function th_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('th', p_attributes, p_open);
    end th_;
    
    static function table_heading_
    (
        p_value      in varchar2,
        p_attributes in varchar2 default null
    ) return varchar2 
    is
        d varchar2(32000);
    begin
        d := th_(p_attributes, true);
        d := d || p_value;
        d := d || th_(p_open => false);
        return d;
    end table_heading_;
    
    --table data <td></td>
    static function td_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('td', p_attributes, p_open);
    end td_;
    
    static function table_data_
    (
        p_value      in varchar2,
        p_attributes in varchar2 default null
    ) return varchar2 
    is
        d varchar2(32000);
    begin
        d := td_(p_attributes, true);
        d := d || p_value;
        d := d || td_(p_open => false);
        return d;
    end table_data_;
    
    --ordered list <ol></ol>
    static function ol_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('ol', p_attributes, p_open);
    end ol_;
    
    --unordered list <ul></ul>
    static function ul_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('ul', p_attributes, p_open);
    end ul_;
    
    --list item <lt></li>
    static function li_
    (
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2 
    is
    begin
        return app#ml.simple_('li', p_attributes, p_open);
    end li_;
    
    static function list_item_
    (
        p_value      in varchar2,
        p_attributes in varchar2 default null
    ) return varchar2 
    is
        d varchar2(32000);
    begin
        d := li_(p_attributes,true);
        d := d || p_value;
        d := d || li_(p_open => false);
        return d;
    end list_item_;
    
end;