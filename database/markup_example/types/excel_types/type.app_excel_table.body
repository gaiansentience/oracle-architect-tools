create or replace type body app#excel_table is

    constructor function app#excel_table 
    return self as result 
    is
    begin
        self.initialize_table;
        return;
    end app#excel_table;

    constructor function app#excel_table
    (
        p_title in varchar2
    ) return self as result 
    is
    begin
        self.initialize_table;
        self.table_title := p_title;
        return;
    end app#excel_table;

    member procedure set_heading
    (
        p_heading in app#excel_row
    ) 
    is
    begin
        self.table_heading := p_heading;
    end set_heading;

    member procedure add_row
    (
        p_table_row in app#excel_row
    ) 
    is
    begin
        if self.table_rows is null then
            self.table_rows := new app#excel_rows();
        end if;
        self.table_rows.extend;
        self.table_rows(self.table_rows.last) := p_table_row;
    end add_row;

    member procedure initialize_table 
    is
    begin
        self.initialize;
        self.table_heading := new app#excel_row();
        self.table_rows    := new app#excel_rows();
        self.table_title   := null;
        self.table_xml     := null;
        dbms_lob.createtemporary(self.table_xml, false, dbms_lob.call);
    end initialize_table;

    member procedure to_xml 
    is
        w_tag varchar2(100) := 'Worksheet';
        t_tag     varchar2(100) := 'Table';
        wa app#attrib;
    begin
        --<Worksheet ss:Name="first sheet">  <Table>
        wa := new app#attrib('ss:Name', self.table_title);
  
        self.open(p_tag => w_tag, p_attributes => wa.attribute);
        self.open(p_tag => t_tag);
        self.table_heading.to_xml;
        app#fmt.append(self.data, self.table_heading.row_xml);
        for i in 1 .. self.table_rows.count loop
            self.table_rows(i).to_xml;
            app#fmt.append(self.data, self.table_rows(i).row_xml);
        end loop;

        self.close(p_tag => t_tag);
        self.close(p_tag => w_tag);
        self.table_xml := self.data;
  
    end to_xml;

end;
/

