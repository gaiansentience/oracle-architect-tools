create or replace type body app#attrib is

    constructor function app#attrib return self as result 
    is
    begin
        self.initialize;
        return;
    end app#attrib;

    constructor function app#attrib(p_formatted_attribute in varchar2) return self as result 
    is
    begin
        self.initialize;
        self.parse(p_formatted_attribute);
        return;
    end app#attrib;

    constructor function app#attrib
    (
        p_name  in varchar2,
        p_value in varchar2
    ) return self as result 
    is
    begin
        self.initialize;
        self.attrib_name  := p_name;
        self.attrib_value := p_value;
        self.build;
        return;
    end app#attrib;

    member procedure initialize 
    is
    begin

        self.attrib_name      := null;
        self.attrib_value     := null;
        self.attribute := null;

    end initialize;

    member procedure build 
    is
    begin

        self.attribute := self.attrib_name || app#fmt.equal || app#fmt.quote(self.attrib_value, true);

    end build;

    member procedure parse(p_attribute in varchar2) 
    is
        i number;
        l_delimiter varchar2(10);
    begin
        /*  attribute examples
        name="Henry Davidson"
        name="Henry=Davidson" age="22" hair="brown"
        ns1:name="Henry Davidson" ns1:age="22" ns1:hair="brown"
        name='Henry Davidson'
        name='Henry Davidson' age='22' hair='brown'
        ns1:name='Henry Davidson' ns1:age='22' ns1:hair='brown'
        */

        self.attribute := p_attribute;

        --find the first = sign (name="value")
        i := instr(p_attribute, app#fmt.equal, 1);

        --get the name
        self.attrib_name := trim(substr(p_attribute, 1, i - 1));

        --get the value
        self.attrib_value := trim(substr(p_attribute, i + 1));
        l_delimiter := substr(self.attrib_value, 1, 1);
        case 
            when l_delimiter = app#fmt.dq then 
                self.attrib_value := trim(both app#fmt.dq from self.attrib_value);
            when l_delimiter = app#fmt.sq then
                self.attrib_value := trim(both app#fmt.sq from self.attrib_value);
                --if attribute had internal double quotes with sq delimiter, convert to sq
                self.attrib_value := replace(self.attrib_value, app#fmt.dq, app#fmt.sq);
            else
                null;
        end case;

        self.build;

    end parse;

end;