create or replace type body app#ml is

    constructor function app#ml 
    return self as result 
    is
    begin
        self.initialize;
        return;
    end app#ml;

    member procedure initialize
    is
    begin
        dbms_lob.createtemporary(self.data, false, dbms_lob.call);
    end initialize;
  
    member function to_varchar
    return varchar2
    is
        v_varchar varchar2(32000);
        i number;
    begin
  
        i := dbms_lob.getlength(self.data);
        if i < 32000 then
            v_varchar := dbms_lob.substr(self.data, i, 1);
        else
            raise_application_error(-20100,'Data exceeds max varchar2 length');    
        end if;
    
        return v_varchar;
  
    end to_varchar;
  
    member procedure append_value
    (
        p_value      in varchar2,
        p_use_escape_sequences in boolean default true    
    )
    is
        v_value varchar2(32000);
    begin
  
        v_value := p_value;
        if p_use_escape_sequences then
            app#fmt.add_escape_sequences(v_value);
        end if;
        if p_value is not null then
            app#fmt.append(self.data, v_value);
        end if;
  
    end append_value;

    member procedure append_markup
    (
        p_value      in varchar2, 
        p_add_crlf   in boolean default false
    )
    is
    begin
        app#fmt.append(self.data, p_value, p_add_crlf);
    end append_markup;

    --open a markup tag,  <tag attribs>
    --optionally empty,   <tag attribs />
    member procedure open
    (
        p_tag        in varchar2,
        p_attributes in varchar2 default null,
        p_empty      in boolean default false
    )
    is
    begin
        self.append_markup(p_value => app#ml.open_(p_tag, p_attributes, p_empty), p_add_crlf => p_empty);
    end open;

    --open an empty markup, <tag attribs />
    member procedure empty
    (
        p_tag        in varchar2,
        p_attributes in varchar2 default null
    )
    is
    begin
        self.open(p_tag, p_attributes, true);
    end empty;  

    --close a markup,  </ tag>
    --add a trailing crlf
    member procedure close
    (
        p_tag        in varchar2
    )
    is
    begin
        self.append_markup(app#ml.close_(p_tag), true);
    end close;
  
    --simple markup, no content
    --open true,  <tag attributes>
    --open false, </tag>
    member procedure simple
    (
        p_tag        in varchar2,
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    )
    is
    begin
        if p_open then
            self.open(p_tag, p_attributes);
        else
            self.close(p_tag);
        end if;
    end simple;
  
    --markup with content  <tag attributes>value</ tag>
    --if value is null and allow empty is true <tag />
    member procedure element
    (
        p_value      in varchar2,
        p_tag        in varchar2,
        p_attributes in varchar2 default null,
        p_allow_empty in boolean default true
    )
    is
    begin
        if p_value is null and p_allow_empty then
            self.empty(p_tag, p_attributes);
        else
            self.open(p_tag, p_attributes);
            self.append_value(p_value);
            self.close(p_tag);
        end if;
    end element;

    member procedure xml_comment
    (
        p_value      in varchar2
    ) 
    is
    begin
        self.append_markup(app#ml.xml_comment_(p_value));    
    end xml_comment;

    member procedure xml_declaration
    (
        p_xml_version in varchar2 default '1.0'
    ) 
    is
    begin
        self.append_markup(app#ml.xml_declaration_(p_xml_version));
    end xml_declaration;

    --static functions returning varchar2

    --open a markup tag,  <tag attribs>
    --optionally empty,   <tag attribs />
    static function open_
    (
        p_tag        in varchar2,
        p_attributes in varchar2 default null,
        p_empty      in boolean default false
    ) return varchar2
    is
        t varchar2(32000);
    begin
        t := app#fmt.lt || p_tag;
        if p_attributes is not null then
            t := t || app#fmt.space || p_attributes;
        end if;
        if p_empty then
            t := t || app#fmt.space || app#fmt.slash;
        end if;
        t := t || app#fmt.gt;
        return t;
    end open_;

    --open an empty markup, <tag attribs />
    static function empty_
    (
        p_tag        in varchar2,
        p_attributes in varchar2 default null
    ) return varchar2
    is
    begin
        return open_(p_tag, p_attributes, true);
    end empty_;  

    --close a markup,  </ tag>
    --add a trailing crlf
    static function close_
    (
        p_tag        in varchar2
    ) return varchar2
    is
        t varchar2(100);
    begin
        t := app#fmt.lt || app#fmt.slash || p_tag || app#fmt.gt;
        return t;
    end close_;
  
    --simple markup, no content
    --open true,  <tag attributes>
    --open false, </tag>
    static function simple_
    (
        p_tag        in varchar2,
        p_attributes in varchar2 default null,
        p_open       in boolean default true
    ) return varchar2
    is
    begin
        if p_open then
            return open_(p_tag, p_attributes);
        else
            return close_(p_tag);
        end if;
    end simple_;
  
    --markup with content  <tag attributes>value</ tag>
    --if value is null and allow empty is true <tag />
    static function element_
    (
        p_value      in varchar2,
        p_tag        in varchar2,
        p_attributes in varchar2 default null,
        p_allow_empty in boolean default true
    ) return varchar2
    is
        e varchar2(32000);
    begin
        if p_value is null and p_allow_empty then
            e := empty_(p_tag, p_attributes);
        else
            e := open_(p_tag, p_attributes);
            e := e || p_value;
            e := e || close_(p_tag);
        end if;
        return e;
    end element_;

    static function xml_comment_
    (
        p_value in varchar2
    ) return varchar2 
    is
        c varchar2(32000);
    begin
        c := app#fmt.lt || app#fmt.question || p_value || app#fmt.question || app#fmt.gt;
        return c;
    end xml_comment_;

    static function xml_declaration_
    (
        p_xml_version in varchar2 default '1.0'
    ) return varchar2 
    is
        l_attribute app#attrib;
    begin
        l_attribute := new app#attrib('version', p_xml_version);
        return xml_comment_(l_attribute.attribute);
    end xml_declaration_;

end;